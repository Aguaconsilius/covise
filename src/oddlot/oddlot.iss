; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define DISTRO_TYPE ""


#define ARCHSUFFIX GetEnv("COVISE_ARCHSUFFIX")
#if ARCHSUFFIX == ""
  #define ARCHSUFFIX GetEnv("ARCHSUFFIX")
#endif

#define TIMEPREFIX GetEnv("COVISE_DISTRO_TIMEPREFIX")
#if TIMEPREFIX != ""
   #define TIMEPREFIX GetDateTimeString('yymmddhhmm/', '_', '');
#endif

#define QT GetEnv("QT_HOME")
#define PNG GetEnv("PNG_HOME")
#define TIFF  GetEnv("TIFF_HOME")
#define JPEG  GetEnv("JPEG_HOME")
#define ZLIB  GetEnv("ZLIB_HOME")
#define XERCES  GetEnv("XERCESC_HOME")

; set the most used pathes
#define ODDLOTDIR GetEnv("COVISEDIR")
#define EXTERNLIBS GetEnv("EXTERNLIBS")
#define SRC GetEnv("COVISEDIR")+"\src"

#define DIST ODDLOTDIR+"\DIST\DIST."+ARCHSUFFIX
#define BIN  ODDLOTDIR+"\"+ARCHSUFFIX+"\bin"
#define LIB  ODDLOTDIR+"\"+ARCHSUFFIX+"\lib"
#define DBIN "{app}\"+ARCHSUFFIX+"\bin"
#define DLIB "{app}\"+ARCHSUFFIX+"\lib"

#define DSRC "{app}\src"
;#define DCOVER "{app}\covise\src\renderer\COVER"
#define DEXT "{app}\extern_libs"
#define ICONFILE GetEnv("COVISEDIR")+"\icons\covise_install.ico"

#define SYSTEMROOT GetEnv("SystemRoot")
#if ARCHSUFFIX == "win32opt"
  #define LABEL "_win32opt"
  #define SYS GetEnv("SystemRoot")+"\system32\msvc*??*.dll"
#elif ARCHSUFFIX == "win32"
  #define LABEL "_win32"
  #define SYS GetEnv("SystemRoot")+"\system32\msvc*??*.dll"
#elif ARCHSUFFIX == "vista"
  #define LABEL "_vista"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "vistaopt"
  #define LABEL "_vistaopt"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "amdwin64"
  #define X64Arch
  #define LABEL "_amdwin64"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "amdwin64opt"
  #define X64Arch
  #define LABEL "_amdwin64opt"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "zackel"
  #define LABEL "_zackel"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "zackelopt"
  #define LABEL "_zackelopt"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "angus"
  #define X64Arch
  #define LABEL "_angus"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "angusopt"
  #define X64Arch
  #define LABEL "_angusopt"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "berrenda"
  #define X64Arch
  #define LABEL "_berrenda"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "berrendaopt"
  #define X64Arch
  #define LABEL "_berrendaopt"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "tamarau"
  #define X64Arch
  #define LABEL "_tamarau"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#elif ARCHSUFFIX == "tamarauopt"
  #define X64Arch
  #define LABEL "_tamarauopt"
  #define SYS GetEnv("EXTERNLIBS")+"\runtime\*.exe"
#else
  #pragma message "Warning: undefined or unknown ARCHSUFFIX! Cannot set SYS variable!"
  #define LABEL "UNKNOWN"
#endif


[Setup]
;compiler-related

PrivilegesRequired=None
#ifdef X64Arch
ArchitecturesInstallIn64BitMode="x64"
#endif

OutputDir={#DIST}

#define SUFFIX_VERSION "090"
OutputBaseFilename={#TIMEPREFIX}oddlot_{#SUFFIX_VERSION}{#LABEL}

;installer-related
#if (ARCHSUFFIX == "amdwin64") || (ARCHSUFFIX == "amdwin64opt") || (ARCHSUFFIX == "angus") || (ARCHSUFFIX == "angusopt")
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64
#define SUFFIX_ARCH "x64"
#else
#define SUFFIX_ARCH "x86"
#endif

AppName=OddLot
AppVerName=OddLot 0.9.0

AppPublisher=HLRS
AppPublisherURL=http://www.hlrs.de
AppSupportURL=http://www.hlrs.de
AppUpdatesURL=http://www.hlrs.de

ChangesAssociations=true
ChangesEnvironment=true
DefaultDirName={reg:HKLM\SOFTWARE\ODDLOT,Path|{pf}\ODDLOT}
DefaultGroupName={reg:HKLM\SOFTWARE\ODDLOT,StartMenu|ODDLOT}
DisableStartupPrompt=true
; cosmetic
SetupIconFile={#ICONFILE}
ShowLanguageDialog=yes

[Types]
Name: standard; Description: ODDLOT Standard Installation
Name: custom; Description: Custom Installation; Flags: iscustom
Name: retistry; Description: Registry only, donï¿½t install any files
[Components]

Name: core; Description: ODDLOT core system; Types: standard custom


[Files]


#if ARCHSUFFIX == "vista"
Source: {#EXTERNLIBS}\runtime\vcredist_x86_sp1_secfix.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "vistaopt"
Source: {#EXTERNLIBS}\runtime\vcredist_x86_sp1_secfix.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "amdwin64"
Source: {#EXTERNLIBS}\runtime\vcredist_x64_sp1_secfix.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "amdwin64opt"
Source: {#EXTERNLIBS}\runtime\vcredist_x64_sp1_secfix.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "zackel"
Source: {#EXTERNLIBS}\runtime\vcredist_x86.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "zackelopt"
Source: {#EXTERNLIBS}\runtime\vcredist_x86.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "angus"
Source: {#EXTERNLIBS}\runtime\vcredist_x64.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#elif ARCHSUFFIX == "angusopt"
Source: {#EXTERNLIBS}\runtime\vcredist_x64.exe; DestDir: {#DLIB}; Flags: recursesubdirs; Components: core
#endif
Source: {#EXTERNLIBS}\runtime\_version.txt; DestDir: {#DLIB}; Flags: skipifsourcedoesntexist; Components: core


Source: {#SRC}\tools\oddlot\build.tamarau\Release\*.exe; DestDir: {#DBIN}; Flags: recursesubdirs; Components: core

; we are using Qt version >= 4.5.0 LGPL
Source: {#QT}\bin\*.dll; DestDir: {#DLIB}; Components: core
Source: {#QT}\plugins\*.dll; DestDir: {#DLIB}\plugins; Flags: recursesubdirs; Components: core
Source: {#EXTERNLIBS}\OpenSSL\bin\*.dll; DestDir: {#DLIB}; Components: core
Source: {#ODDLOTDIR}\signals\*; DestDir: {app}\signals; Excludes: .svn\*; Flags: recursesubdirs; Components: core
Source: {#ODDLOTDIR}\src\tools\oddlot\prototypes\*; DestDir: {app}\prototypes; Excludes: .svn\*; Flags: recursesubdirs; Components: core
Source: {#ODDLOTDIR}\src\tools\oddlot\signs\*; DestDir: {app}\signs; Excludes: .svn\*; Flags: recursesubdirs; Components: core

Source: {#EXTERNLIBS}\Proj4\bin\*.dll; DestDir: {#DLIB}; Components: core
Source: {#TIFF}\bin\*.dll; DestDir: {#DLIB}; Components: core
Source: {#JPEG}\lib\*.dll; DestDir: {#DLIB}; Flags: skipifsourcedoesntexist; Components: core
Source: {#ZLIB}\bin\*.dll; DestDir: {#DLIB}; Components: core
Source: {#EXTERNLIBS}\Xerces\lib\*.dll; DestDir: {#DLIB}; Components: core
Source: {#EXTERNLIBS}\icu\bin64\*.dll; DestDir: {#DLIB}; Components: core

[Registry]
Root: HKLM; Subkey: SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\oddlot.exe; ValueType: string; ValueName: Path; ValueData: "{code:getShortAppDir|{app}}\{#ARCHSUFFIX}\lib;{app}\{#ARCHSUFFIX}\bin"; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForAll()
Root: HKCU; Subkey: Environment; ValueType: string; ValueName: ODDLOTDIR; ValueData: {code:getShortAppDir|{app}}; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForUser()
Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: ODDLOTDIR; ValueData: {code:getShortAppDir|{app}}; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForAll()

Root: HKCR; Subkey: .xodr; ValueType: string; ValueName: ; ValueData: OpenDriveFile; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForAll()
Root: HKCR; Subkey: OpenDriveFile\shell\Open\command; ValueType: string; ValueName: ; ValueData: {code:GetShortName|{app}}\{#ARCHSUFFIX}\bin\oddlot.exe %1; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForAll()


[INI]
Filename: {#DBIN}\qt.conf; Section: Paths
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Prefix; String: {code:GetWithForwardSlashes|{code:GetShortName|{#DLIB}}}
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Documentation; String: doc
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Headers; String: include
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Libraries; String: lib
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Binaries; String: bin
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Plugins; String: plugins
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Translations; String: translations
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Examples; String: examples
Filename: {#DBIN}\qt.conf; Section: Paths; Key: Demos; String: demos



[UninstallDelete]
Type: files; Name: {#DEXT}\qt\bin\qt.conf

[Tasks]
Name: desktopicon; Description: Icons on &Desktop; GroupDescription: Desctop Icons:
Name: startupcion; Description: Icons into &Startup; GroupDescription: Startup Icons:; Flags: unchecked


[Icons]

Name: {group}\OddLot; Filename: {app}\{#ARCHSUFFIX}\bin\oddlot.exe; Comment: Start OddLot; IconFilename: {app}\icons\oddlot.ico; Flags: createonlyiffileexists dontcloseonexit

Name: {commondesktop}\OddLot; Filename: {app}\{#ARCHSUFFIX}\bin\oddlot.exe; Comment: Start OddLot; IconFilename: {app}\icons\oddlot.ico; Flags: createonlyiffileexists

[Run]
#if ARCHSUFFIX == "vista"
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x86_sp1_secfix.exe; Parameters: /Q; Description: Install VisualStudio 2005 SP1 Runtime (incl. ATL sec.fix); Flags: postinstall
#elif ARCHSUFFIX == "vistaopt"
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x86_sp1_secfix.exe; Parameters: /Q; Description: Install VisualStudio 2005 SP1 Runtime (incl. ATL sec.fix); Flags: postinstall
#elif ARCHSUFFIX == "amdwin64"
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x64_sp1_secfix.exe; Parameters: /Q; Description: Install VisualStudio 2005 SP1 Runtime (incl. ATL sec.fix); Flags: postinstall
#elif ARCHSUFFIX == "tamarau"
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x64.exe; Parameters: /Q; Description: Installing VisualStudio 2012 Runtime; Flags: postinstall
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist2010_x64.exe; Parameters: /Q; Description: Install VisualStudio 2010 Runtime; Flags: postinstall
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x86.exe; Parameters: /Q; Description: Install VisualStudio 2010 Runtime; Flags: postinstall
Filename: msiexec; Parameters: /i {app}\covise\{#ARCHSUFFIX}\bin\mpi_x64.Msi; Description: Installint MS-MPI Runtime; Flags: postinstall
#elif ARCHSUFFIX == "tamarauopt"
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x64.exe; Parameters: /Q; Description: Install VisualStudio 2012 Runtime; Flags: postinstall
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist2010_x64.exe; Parameters: /Q; Description: Install VisualStudio 2010 Runtime; Flags: postinstall
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x86.exe; Parameters: /Q; Description: Install VisualStudio 2010 Runtime; Flags: postinstall
Filename: msiexec; Parameters: /i {app}\covise\{#ARCHSUFFIX}\bin\mpi_x64.Msi; Description: Installint MS-MPI Runtime; Flags: postinstall
#elif ARCHSUFFIX == "amdwin64opt"
Filename: {app}\covise\{#ARCHSUFFIX}\bin\vcredist_x64_sp1_secfix.exe; Parameters: /Q; Description: Install VisualStudio 2005 SP1 Runtime (incl. ATL sec.fix); Flags: postinstall
#endif

[Code]

program Setup;

var
  InstallForAllResult: Boolean;
  InstallForAllChecked: Boolean;
  InstallRemoteDaemonForAllResult: Boolean;
  InstallRemoteDaemonResult: Boolean;
  InstallRemoteDaemonChecked: Boolean;
  LicenseImportPage: TInputFileWizardPage;



var
  {simHost: String;
  renderHost: String;
  gTabletHost: String;
  gNumNodes: Integer;
  numCPUs: Integer;}

  CheckInstallForAll,CheckInstallRemoteDaemon,CheckInstallRemoteDaemonForAll: TCheckBox;
  UNCPathName: TEdit;
  Page: TWizardPage;
  CheckBox: TCheckBox;
  NumNodes, HeadNode, VisNode, TabletPC, PostNode, NumCPUs: TEdit;
  Lbl, Lbl2, Lbl3, Lbl4, Lbl5, Lbl6, Lbl11: TLabel;



procedure CurStepChanged(CurStep: TSetupStep);
var
   nnodes: Integer;
   ncpus: Integer;
   tmpInt: Integer;
   tmpstr: String;
   sedParams: String;
   appDir: String;
   ipA,ipB,ipS: String;
   ipNum: Integer;
   i,numdots: Integer;
   machinesStream: TStream;
   ResultCode: Integer;
begin
end;



procedure FormButtonOnClick(Sender: TObject);
var
  Form: TSetupForm;
  OKButton, CancelButton: TButton;
begin
  Form := CreateCustomForm();
  try
    Form.ClientWidth := ScaleX(256);
    Form.ClientHeight := ScaleY(256);
    Form.Caption := 'TSetupForm';
    Form.CenterInsideControl(WizardForm, False);

    OKButton := TButton.Create(Form);
    OKButton.Parent := Form;
    OKButton.Width := ScaleX(75);
    OKButton.Height := ScaleY(23);
    OKButton.Left := Form.ClientWidth - ScaleX(75 + 6 + 75 + 10);
    OKButton.Top := Form.ClientHeight - ScaleY(23 + 10);
    OKButton.Caption := 'OK';
    OKButton.ModalResult := mrOk;

    CancelButton := TButton.Create(Form);
    CancelButton.Parent := Form;
    CancelButton.Width := ScaleX(75);
    CancelButton.Height := ScaleY(23);
    CancelButton.Left := Form.ClientWidth - ScaleX(75 + 10);
    CancelButton.Top := Form.ClientHeight - ScaleY(23 + 10);
    CancelButton.Caption := 'Cancel';
    CancelButton.ModalResult := mrCancel;
    CancelButton.Cancel := True;

    Form.ActiveControl := OKButton;


    if Form.ShowModal() = mrOk then
      MsgBox('You clicked OK.', mbInformation, MB_OK);
  finally
    Form.Free();
  end;
end;



procedure CreateTheWizardPages;
   var
      appname : String;
begin
  { TButton and others }

  appname := 'OddLot';

  Page := CreateCustomPage(wpWelcome, 'ODDLOT Installation',
              'Free OpenDRIVE Editor');
  Lbl11 := TLabel.Create(Page);
  Lbl11.Caption :='OddLot Free OpenDRIVE Editor';
  Lbl11.AutoSize := True;
  Lbl11.Parent := Page.Surface;

    if IsAdminLoggedOn then
    begin
  CheckInstallForAll := TCheckBox.Create(Page);
  CheckInstallForAll.Top := Lbl11.Top + Lbl11.Height + ScaleY(8);
  CheckInstallForAll.Width := Page.SurfaceWidth;
  CheckInstallForAll.Height := ScaleY(17);
  CheckInstallForAll.Caption := 'Install ' + appname + ' for all users?';
  CheckInstallForAll.Checked := True;
  CheckInstallForAll.Parent := Page.Surface;
    end;


  //UNCPathName := TEdit.Create(Page);
  //UNCPathName.Parent := Page.Surface;

end;
function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = 2 then
  begin
     //UNCPathName.Text := ExpandConstant('{app}');
  end;
  Result := true;


end;

procedure AboutButtonOnClick(Sender: TObject);
begin
  MsgBox('This Wizard allows to install and configure ODDLOT', mbInformation, mb_Ok);
end;



procedure URLLabelOnClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('open', 'http://www.hlrs.de/organization/vis', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;





procedure InitializeWizard();
var
  AboutButton, CancelButton: TButton;
  URLLabel: TNewStaticText;
  BackgroundBitmapImage: TBitmapImage;
  BackgroundBitmapText: TNewStaticText;
begin
  { Custom wizard pages }


  CreateTheWizardPages;

  { Other custom controls }

  CancelButton := WizardForm.CancelButton;

  AboutButton := TButton.Create(WizardForm);
  AboutButton.Left := WizardForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  AboutButton.Top := CancelButton.Top;
  AboutButton.Width := CancelButton.Width;
  AboutButton.Height := CancelButton.Height;
  AboutButton.Caption := '&About...';
  AboutButton.OnClick := @AboutButtonOnClick;
  AboutButton.Parent := WizardForm;

  URLLabel := TNewStaticText.Create(WizardForm);
  URLLabel.Caption := 'www.hlrs.de';
  URLLabel.Cursor := crHand;
  URLLabel.OnClick := @URLLabelOnClick;
  URLLabel.Parent := WizardForm;
  { Alter Font *after* setting Parent so the correct defaults are inherited first }
  URLLabel.Font.Style := URLLabel.Font.Style + [fsUnderline];
  URLLabel.Font.Color := clBlue;
  URLLabel.Top := AboutButton.Top + AboutButton.Height - URLLabel.Height - 2;
  URLLabel.Left := AboutButton.Left + AboutButton.Width + ScaleX(20);

  BackgroundBitmapImage := TBitmapImage.Create(MainForm);
  BackgroundBitmapImage.Left := 50;
  BackgroundBitmapImage.Top := 100;
  BackgroundBitmapImage.AutoSize := True;
  BackgroundBitmapImage.Bitmap := WizardForm.WizardBitmapImage.Bitmap;
  BackgroundBitmapImage.Parent := MainForm;

  BackgroundBitmapText := TNewStaticText.Create(MainForm);
  BackgroundBitmapText.Left := BackgroundBitmapImage.Left;
  BackgroundBitmapText.Top := BackgroundBitmapImage.Top + BackgroundBitmapImage.Height + ScaleY(8);
  BackgroundBitmapText.Caption := 'TBitmapImage';
  BackgroundBitmapText.Parent := MainForm;


end;



function InstallForAll(): Boolean;
begin

  Result := False;
  if IsAdminLoggedOn then
  begin
     Result := CheckInstallForAll.Checked;
  end;
end;



function InstallForUser(): Boolean;
begin
     Result := NOT InstallForAll();
end;



function InstallRemoteDaemonForAll(): Boolean;
begin
  Result := False;
  if IsAdminLoggedOn then
  begin
     Result := CheckInstallRemoteDaemonForAll.Checked;
  end;
end;

function getUNCPath(): String;
begin
    { Result := UNCPathName.Text;}
end;


function getShortAppDir(appName: String ): String;
begin
     //if UNCPathName.Text = '' then
     //begin
        Result := appName;
     //end
     //else begin
     //   Result := GetShortName(UNCPathName.Text);
     //end;
end;
function InstallRemoteDaemonForUser(): Boolean;
begin
     Result := CheckInstallRemoteDaemon.Checked;
end;




function GetWithForwardSlashes(Param: String): String;
var
  mytmpstr : String;
begin
  mytmpstr := ExpandConstant(Param);
  StringChangeEx(mytmpstr, '\', '/', True);
  Result := mytmpstr;
end;



begin
   {body of program Setup}
end.
