; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!


; get some environment variables
#define DEVELOPMENT GetEnv("COVISE_DEVELOPMENT")
#if DEVELOPMENT == ""
#define DEVELOPMENT "NO"
#endif

#define SIMULATION GetEnv("COVISE_SIMULATION")
#if SIMULATION == ""
#define SIMULATION "NO"
#endif

#define VERSION GetEnv("COVISE_DISTRIBUTION")
#if VERSION == ""
#define VERSION "RRZK"
#endif

#define GPL_CLEAN GetEnv("COVISE_GPL_CLEAN")
#if GPL_CLEAN == ""
#define GPL_CLEAN "NO"
#endif

#define ARCHSUFFIX GetEnv("COVISE_ARCHSUFFIX")
#if ARCHSUFFIX == ""
;#define ARCHSUFFIX "win32"
#define ARCHSUFFIX GetEnv("ARCHSUFFIX")
#endif

#define COVISEDOCU GetEnv("COVISE_DIST_DOCU")
#if COVISEDOCU == ""
#define COVISEDOCU GetEnv("COVISEDIR")
#endif

#define DATA GetEnv("COVISE_DIST_DATA")
#if DATA == ""
#define DATA GetEnv("COVISEDIR")+"\data\general"
#endif

; get environment variables for extern libs
#define OPENSCENEGRAPH GetEnv("OPENSCENEGRAPH_HOME")
#define OSG GetEnv("OSG_HOME")
#define CG GetEnv("CG_HOME")
#define QT GetEnv("QT_HOME")
#define PNG GetEnv("PNG_HOME")
#define AUDIOFILE GetEnv("AUDIOFILE_HOME")
#define OIV  GetEnv("OIV_HOME")
#define PERFORMER GetEnv("PERFORMER_HOME")
#define PTHREAD GetEnv("PTHREAD_HOME")
#define GLUT GetEnv("GLUT_HOME")
#define ARTOOLKIT GetEnv("ARTOOLKIT_HOME")
#define COIN3D  GetEnv("COIN3D_HOME")
#define SOQT GetEnv("SOQT_HOME")
#define CAL3D GetEnv("CAL3D_HOME")
#define VISSDK GetEnv("VISSDK_HOME")
#define DSV GetEnv("DSV_HOME")
#define VTK  GetEnv("VTK_HOME")
#define TIFF  GetEnv("TIFF_HOME")
#define INTEL "C:\Programme\Intel\Fortran\compiler80\IA32"

;#define SIMDATA "p:\IHS"
#define SIMDATA "C:\Programme\Covise\simulation"

; set the most used pathes
#if ARCHSUFFIX == "win32"
#define DIST GetEnv("COVISEDIR")+"\DIST\DIST.win32"
#define BIN GetEnv("COVISEDIR")+"\win32\bin"
#define LIB GetEnv("COVISEDIR")+"\win32\lib"
#define DBIN "{app}\covise\win32\bin"
#define DLIB "{app}\covise\win32\lib"
#endif
#if ARCHSUFFIX == "vista"
#define DIST GetEnv("COVISEDIR")+"\DIST\DIST.vista"
#define BIN GetEnv("COVISEDIR")+"\vista\bin"
#define LIB GetEnv("COVISEDIR")+"\vista\lib"
#define DBIN "{app}\covise\vista\bin"
#define DLIB "{app}\covise\vista\lib"
#endif
#if ARCHSUFFIX == "win32opt"
#define DIST GetEnv("COVISEDIR")+"\DIST\DIST.win32opt"
#define BIN GetEnv("COVISEDIR")+"\win32opt\bin"
#define LIB GetEnv("COVISEDIR")+"\win32opt\lib"
#define DBIN "{app}\covise\win32opt\bin"
#define DLIB "{app}\covise\win32opt\lib"
#endif
#if ARCHSUFFIX == "vistaopt"
#define DIST GetEnv("COVISEDIR")+"\DIST\DIST.vistaopt"
#define BIN GetEnv("COVISEDIR")+"\vistaopt\bin"
#define LIB GetEnv("COVISEDIR")+"\vistaopt\lib"
#define DBIN "{app}\covise\vistaopt\bin"
#define DLIB "{app}\covise\vistaopt\lib"
#endif

#define COVISEDIR GetEnv("COVISEDIR")
#define EXTERNLIBS GetEnv("EXTERNLIBS")
#define COMMONDIR GetEnv("COVISEDIR") +"\..\common"
#define SRC GetEnv("COVISEDIR")+"\src"
#define EXAMPLE GetEnv("COVISEDIR")+"\src\application\examples"

#define DSRC "{app}\covise\src"
#define DCOVER "{app}\covise\src\renderer\COVER"
#define DOPENCOVER "{app}\covise\src\renderer\OpenCOVER"
#define DEXT "{app}\covise\extern_libs"
#define DEXAMPLE "{app}\covise\src\application/examples"
#define DDAT "{app}\covise\data\general"
#define SYS GetEnv("SystemRoot")+"\system32\msvc*??*.dll"
#define SIMDATAOUT "{app}\simulation"
#define ICONFILE GetEnv("COVISEDIR")+"\icons\covise.ico"

[Setup]
;compiler-related

#if GPL_CLEAN == "YES"
#define SUFFIX_GPL ""
#else
#if VERSION == "RRZK"
#define SUFFIX_GPL "_rrzk-only"
#else
#define SUFFIX_GPL "_hlrs-only"
#endif
#endif

#if DEVELOPMENT == "NO"
#define SUFFIX_DEV "_nodev"
#else
#define SUFFIX_DEV ""
#endif

OutputDir={#DIST}

OutputBaseFilename=fenfloss_530{#SUFFIX_DEV}{#SUFFIX_GPL}

;installer-related
AppName=Fenfloss
AppVerName=Fenfloss 5.3.0
AppPublisher=HLRS
AppPublisherURL=http://www.hlrs.de
AppSupportURL=http://www.hlrs.de
AppUpdatesURL=http://www.hlrs.de
ChangesAssociations=true
ChangesEnvironment=true
DefaultDirName={pf}\COVISE
DefaultGroupName=COVISE
DisableStartupPrompt=false
; cosmetic
SetupIconFile={#ICONFILE}
ShowLanguageDialog=yes

[Types]
Name: standard; Description: Fenfloss Standard installation
Name: custom; Description: Custom installation; Flags: iscustom

[Components]

Name: core; Description: Fenfloss core system; Types: standard custom; Flags: fixed
Name: kiebingen; Description: Kiebingen Dataset; Types: standard custom
Name: archflow; Description: Architecture Dataset; Types: standard custom

[Files]

Source: c:\Archflow\ARServer.wrl; DestDir: {app}\simulation\Archflow; Components: archflow
Source: {#COVISEDIR}\net\archflow.net; DestDir: {app}\covise\net; Components: archflow
Source: c:\Kiebingen\*; DestDir: {app}\simulation\Kiebingen; Components: kiebingen
Source: c:\Kiebingen\maps\*; DestDir: {app}\simulation\Kiebingen\maps; Components: kiebingen
Source: c:\Kiebingen\sound\*; DestDir: {app}\simulation\Kiebingen\sound; Components: kiebingen
Source: {#COVISEDIR}\net\kiebingen.net; DestDir: {app}\covise\net; DestName: kiebingen.net.base; Components: kiebingen
Source: {#COVISEDIR}\net\archflow.net; DestDir: {app}\covise\net; Components: archflow
Source: {#SIMDATA}\IHS\covise\*.covise; DestDir: {#SIMDATAOUT}\IHS\covise; Components: kiebingen

Source: {#INTEL}\lib\*.dll; DestDir: {#DLIB}; Components: core

Source: {#SIMDATA}\IHS\bin\flow_covise.bat; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\IHS\bin\flow_covise_MS.bat; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\IHS\bin\flow.exe; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\IHS\bin\fenfloss.exe; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\IHS\bin\smpd.exe; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\IHS\bin\mpiexec.exe; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\IHS\bin\*.dll; DestDir: {#SIMDATAOUT}\IHS\bin; Components: core
Source: {#SIMDATA}\machines.txt; DestDir: {#SIMDATAOUT}; DestName: machines.txt.base; Components: core



Source: {#SIMDATA}\IHS\archflow\flow.stf; DestDir: {#SIMDATAOUT}\IHS\archflow; Components: core

Source: {#SIMDATA}\IHS\gate\flow.stf; DestDir: {#SIMDATAOUT}\IHS\gate; Components: core
Source: {#SIMDATA}\IHS\gate\press.rb; DestDir: {#SIMDATAOUT}\IHS\gate; Components: core

Source: {#SIMDATA}\IHS\sc2004booth\flow.stf; DestDir: {#SIMDATAOUT}\IHS\sc2004booth; Components: core
Source: {#SIMDATA}\IHS\kiebsaug\flow.stf; DestDir: {#SIMDATAOUT}\IHS\kiebsaug; Components: core
Source: {#SIMDATA}\IHS\radial\flow.stf; DestDir: {#SIMDATAOUT}\IHS\radial; Components: core
Source: {#SIMDATA}\IHS\axial\flow.stf; DestDir: {#SIMDATAOUT}\IHS\axial; Components: core
Source: {#SIMDATA}\IHS\sgen\*.dat; DestDir: {#SIMDATAOUT}\IHS\sgen; Components: core

Source: {#SIMDATA}\IHS\domdec\zerno.stf; DestDir: {#SIMDATAOUT}\IHS\domdec; Components: core
Source: {#SIMDATA}\IHS\domdec\zer\zer.txt; DestDir: {#SIMDATAOUT}\IHS\domdec\zer; Components: core

Source: {#SIMDATA}\IHS\example_data\gate_low.cfg; DestDir: {#SIMDATAOUT}\IHS\example_data; Components: core
Source: {#SIMDATA}\IHS\example_data\gate_kieb.cfg; DestDir: {#SIMDATAOUT}\IHS\example_data; Components: core
Source: {#SIMDATA}\IHS\example_data\gate_mini.cfg; DestDir: {#SIMDATAOUT}\IHS\example_data; Components: core
Source: {#SIMDATA}\IHS\example_data\my_dummy.bc; DestDir: {#SIMDATAOUT}\IHS\example_data; Components: core




[Registry]
; for user installation
Root: HKCU; Subkey: Environment; ValueType: string; ValueName: SIMDIR; ValueData: {app}\simulation; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForUser()
Root: HKCU; Subkey: Environment; ValueType: string; ValueName: PATH; ValueData: "{app}\simulation\IHS\bin;{olddata}"; Flags: uninsdeletekeyifempty uninsdeletevalue

; end for user installation

Root: HKLM; Subkey: SYSTEM\CurrentControlSet\Control\Session Manager\Environment; ValueType: string; ValueName: SIMDIR; ValueData: {app}\simulation; Flags: uninsdeletekeyifempty uninsdeletevalue; Check: InstallForAll()

; end for global installation



[Icons]
Name: {group}\Fenfloss\machines.txt; Filename: {app}\simulation\machines.txt  Flags: createonlyiffileexists
Name: {group}\Fenfloss\Uninstall Simulation; Filename: {uninstallexe}


[Run]
; Filename: regsvr32.exe; Parameters: /s {#DLIB}\DsRendererd.ax; Description: Register Rendering filter; Flags: nowait postinstall
#if ARCHSUFFIX == "vista"
Filename: msiexec.exe; Parameters: /i {app}\covise\{#ARCHSUFFIX}\lib\Microsoft_VC80_DebugCRT_x86.msi /qn; Description: Install VisualStudio 2005 Runtime; Flags: postinstall
#endif
#if ARCHSUFFIX == "vistaopt"
Filename: msiexec.exe; Parameters: /i {app}\covise\{#ARCHSUFFIX}\lib\Microsoft_VC80_CRT_x86.msi /qn; Description: Install VisualStudio 2005 Runtime; Flags: postinstall
#endif
Filename: Explorer.exe; Parameters: {app}\covise; Description: Show COVISE Installation site; Flags: nowait postinstall skipifsilent
Filename: notepad.exe; Parameters: {app}\covise\README.txt; Description: Show COVISE README; Flags: nowait postinstall skipifsilent
Filename: {app}\covise\{#ARCHSUFFIX}\bin\RemoteDaemon.exe; Parameters: ; Description: Start Covise Daemon; Flags: nowait postinstall

[Code]
program Setup;

var
  InstallForAllResult: Boolean;
  InstallForAllChecked: Boolean;
  InstallRemoteDaemonForAllResult: Boolean;
  InstallRemoteDaemonResult: Boolean;
  InstallRemoteDaemonChecked: Boolean;





var
  {simHost: String;
  renderHost: String;
  gTabletHost: String;
  gNumNodes: Integer;
  numCPUs: Integer;}

  CheckInstallForAll,CheckInstallRemoteDaemon,CheckInstallRemoteDaemonForAll: TCheckBox;
  Page: TWizardPage;
  CheckBox: TCheckBox;
  NumNodes, HeadNode, VisNode, TabletPC, PostNode, NumCPUs: TEdit;
  Lbl, Lbl2, Lbl3, Lbl4, Lbl5, Lbl6, Lbl11,Lbl21,Lbl31: TLabel;
  PasswordEdit: TPasswordEdit;
  msmpiRadio,mpichRadio: TRadioButton;


function ShouldSkipPage(PageID: Integer): Boolean;
begin
  { Skip wpInfoBefore page; show all others }


  {MsgBox('shouldSkipPage:'+IntToStr(PageID), mbInformation, MB_OK);}
  Result := False;
  if PageID = 103 then begin
     if msmpiRadio.checked then
     begin
     Result := true;
     end;
   end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
   nnodes: Integer;
   ncpus: Integer;
   tmpInt: Integer;
   tmpstr: String;
   sedParams: String;
   appDir: String;
   ipA,ipB,ipS: String;
   ipNum: Integer;
   i,numdots: Integer;
   machinesStream: TFileStream;
   tmpStream: TFileStream;
   ResultCode: Integer;
   sedApp: String;
begin
  if CurStep = ssPostInstall then
  begin
      nnodes := StrToInt(NumNodes.Text);
      ncpus := StrToInt(NumCPUs.Text);
      tmpInt :=nnodes*ncpus;
      ipS := HeadNode.Text;
      {tmpstr := "";
      numdots := 1;}
      for i:=1 to Length(ipS) do
      begin
       if ipS[i]='.' then
       begin
           numdots := numdots+1;
       end;

      if numdots = 3 then
       begin
         numdots := numdots+1;
         ipA := ipS;
         Delete(ipA, i+1, 100);
         ipB:=ipS;
         Delete(ipB, 1, i);
         ipNum := StrToInt(ipB);
         break;
       end;

      end;

      for i:=1 to nnodes do
      begin
          tmpstr := tmpstr + ipA+IntToStr(ipNum+i-1) + ' ' + NumCPUs.Text+ #13;
      end;
      {create machines.txt}
      machinesStream := TFileStream.Create(ExpandConstant('{app}\simulation')+'\machines.txt',fmCreate or fmOpenWrite);
      machinesStream.Write(tmpstr,Length(tmpstr));

      appDir := ExpandConstant('{app}');

      for i:=1 to Length(appDir) do
      begin
       if appDir[i]='\' then
       begin
           appDir[i] :='/';
       end;
      end;

      {change .net file}

      sedApp:='"' + appDir + '\covise\vista\bin\sed.exe"';
      for i:=1 to Length(sedApp) do
      begin
       if sedApp[i]='/' then
       begin
           sedApp[i] :='\';
       end;
      end;

      tmpstr:= appDir + '\covise\net\kiebingen.net.base" > "'+appDir + '\covise\net\kiebingen.net"';

      for i:=1 to Length(tmpstr) do
      begin
       if tmpstr[i]='/' then
       begin
           tmpstr[i] :='\';
       end;
      end;

      sedParams := '/c "'+sedApp+' -e "s^/mnt/raid/cod^' +appDir + '/simulation^g" -e "s/141.58.8.11/' + PostNode.Text + '/g" -e "s/visper.hlrs.de/' + PostNode.Text + '/g" -e "s/nero/' + HeadNode.Text + '/g" "'+tmpstr+'"'; 
      Exec('cmd.exe', sedParams, '', SW_SHOW,ewWaitUntilTerminated, ResultCode);

      {MsgBox('sedParams1:'+sedParams, mbInformation, MB_OK);}
      tmpstr:= appDir + '\covise\config\config.fenfloss.xml" > "'+appDir + '\covise\config\config.xml"';

      for i:=1 to Length(tmpstr) do
      begin
       if tmpstr[i]='/' then
       begin
           tmpstr[i] :='\';
       end;
      end;
      {change config.xml}
      sedParams := '/c "'+sedApp+' -e "s/vistablet/' + TabletPC.Text + '/g" -e "s^/mnt/raid/cod^' +appDir + '/simulation^g" -e "s/vistablet/' + TabletPC.Text + '/g" "'+tmpstr+'"'; 
      Exec('cmd.exe', sedParams, '', SW_SHOW,ewWaitUntilTerminated, ResultCode);

    if mpichRadio.checked then
    begin

      tmpStream := TFileStream.Create(appDir+'/simulation/tmpFile',fmCreate or fmOpenWrite);
      tmpstr := GetUserNameString()+ #13 +PasswordEdit.Text + #13 + PasswordEdit.Text + #13;
      tmpStream.Write(tmpstr,Length(tmpstr));
      tmpStream.Free();


      tmpstr:='/c ""'+appDir+'/simulation/IHS/bin/smpd" -install"';

      for i:=2 to Length(tmpstr) do
      begin
       if tmpstr[i]='/' then
       begin
           tmpstr[i] :='\';
       end;
      end;
      Exec('cmd.exe',tmpstr , '', SW_SHOW,ewWaitUntilTerminated, ResultCode);

      tmpstr:='/c "type "'+appDir+'/simulation/tmpFile" | "'+appDir+'/simulation/IHS/bin/mpiexec" -register"';

      for i:=2 to Length(tmpstr) do
      begin
       if tmpstr[i]='/' then
       begin
           tmpstr[i] :='\';
       end;
      end;
      if NOT PasswordEdit.Text = '' then
      begin
      Exec('cmd.exe',tmpstr , '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
      end;


      tmpStream := TFileStream.Create(appDir+'/simulation/tmpFile',fmCreate or fmOpenWrite);
      tmpStream.seek(0,soFromBeginning);
      tmpstr := '                                                         '+ #13 +'                                                               ' + #13 + '                                                                  ' + #13;
      tmpStream.Write(tmpstr,Length(tmpstr));
      tmpStream.Free();

      tmpstr:='/c "del "'+appDir+'/simulation/tmpFile""';

      for i:=2 to Length(tmpstr) do
      begin
       if tmpstr[i]='/' then
       begin
           tmpstr[i] :='\';
       end;
      end;
      Exec('cmd.exe', tmpstr, '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
    end
    else
    begin

      tmpstr:='/c "copy "'+appDir+'/simulation/IHS/bin/flow_covise_ms.bat" "'+appDir+'/simulation/IHS/bin/flow_covise.bat""';

      for i:=2 to Length(tmpstr) do
      begin
       if tmpstr[i]='/' then
       begin
           tmpstr[i] :='\';
       end;
      end;
      Exec('cmd.exe', tmpstr, '', SW_SHOW,ewWaitUntilTerminated, ResultCode);

    end;
  end;
end;

procedure FormButtonOnClick(Sender: TObject);
var
  Form: TSetupForm;
  OKButton, CancelButton: TButton;
begin
  Form := CreateCustomForm();
  try
    Form.ClientWidth := ScaleX(256);
    Form.ClientHeight := ScaleY(256);
    Form.Caption := 'TSetupForm';
    Form.CenterInsideControl(WizardForm, False);

    OKButton := TButton.Create(Form);
    OKButton.Parent := Form;
    OKButton.Width := ScaleX(75);
    OKButton.Height := ScaleY(23);
    OKButton.Left := Form.ClientWidth - ScaleX(75 + 6 + 75 + 10);
    OKButton.Top := Form.ClientHeight - ScaleY(23 + 10);
    OKButton.Caption := 'OK';
    OKButton.ModalResult := mrOk;

    CancelButton := TButton.Create(Form);
    CancelButton.Parent := Form;
    CancelButton.Width := ScaleX(75);
    CancelButton.Height := ScaleY(23);
    CancelButton.Left := Form.ClientWidth - ScaleX(75 + 10);
    CancelButton.Top := Form.ClientHeight - ScaleY(23 + 10);
    CancelButton.Caption := 'Cancel';
    CancelButton.ModalResult := mrCancel;
    CancelButton.Cancel := True;

    Form.ActiveControl := OKButton;

    if Form.ShowModal() = mrOk then
      MsgBox('You clicked OK.', mbInformation, MB_OK);
  finally
    Form.Free();
  end;
end;

procedure msmpiButtonOnClick(Sender: TObject);
begin
  mpichRadio.Checked := false;
end;
procedure mpichButtonOnClick(Sender: TObject);
begin
  msmpiRadio.Checked := false;
end;

procedure CreateTheWizardPages;
begin
  { TButton and others }

  Page := CreateCustomPage(wpWelcome, 'Fenfloss Installation', 'hostnames');

  Lbl11 := TLabel.Create(Page);
        Lbl11.Caption :='This is a non commercial version of Fenfloss';
#if GPL_CLEAN == "NO"
#if VERSION == "RRZK"
        Lbl11.Caption :='This is a version of Fenfloss that is for use by employees of the University of Cologne only. No redistribution is allowed.';
#else
        Lbl11.Caption :='Alpha Version of Fenfloss, no redistribution is allowed.';
#endif
#endif
  Lbl11.AutoSize := True;

  Lbl11.Parent := Page.Surface;

    if IsAdminLoggedOn then
    begin
  CheckInstallForAll := TCheckBox.Create(Page);
  CheckInstallForAll.Top := Lbl11.Top + Lbl11.Height + ScaleY(8);
  CheckInstallForAll.Width := Page.SurfaceWidth;
  CheckInstallForAll.Height := ScaleY(17);
  CheckInstallForAll.Caption := 'Install Fenfloss for all users?';
  CheckInstallForAll.Checked := True;
  CheckInstallForAll.Parent := Page.Surface;
    end;


  CheckInstallRemoteDaemon := TCheckBox.Create(Page);
    if IsAdminLoggedOn then
    begin
  CheckInstallRemoteDaemon.Top := CheckInstallForAll.Top + CheckInstallForAll.Height + ScaleY(8);
  end
  else begin
  CheckInstallRemoteDaemon.Top := Lbl11.Top + Lbl11.Height + ScaleY(8);
  end;
  CheckInstallRemoteDaemon.Width := Page.SurfaceWidth;
  CheckInstallRemoteDaemon.Height := ScaleY(17);
  CheckInstallRemoteDaemon.Checked := True;
  CheckInstallRemoteDaemon.Caption := 'Start Fenfloss Daemon atomatically for current users?';
  CheckInstallRemoteDaemon.Parent := Page.Surface;

    if IsAdminLoggedOn then
    begin
  CheckInstallRemoteDaemonForAll := TCheckBox.Create(Page);
  CheckInstallRemoteDaemonForAll.Top := CheckInstallRemoteDaemon.Top + CheckInstallRemoteDaemon.Height + ScaleY(8);
  CheckInstallRemoteDaemonForAll.Width := Page.SurfaceWidth;
  CheckInstallRemoteDaemonForAll.Height := ScaleY(17);
  CheckInstallRemoteDaemonForAll.Checked := True;
  CheckInstallRemoteDaemonForAll.Caption := 'Start Fenfloss Daemon atomatically for all users?';
  CheckInstallRemoteDaemonForAll.Parent := Page.Surface;

    end;

  Page := CreateCustomPage(Page.ID, 'Demo configuration', 'hostnames');

  Lbl := TLabel.Create(Page);
  {Lbl.Top := Memo.Top + Memo.Height + ScaleY(8);}
  Lbl.Caption := 'Simulation head node(IP)';
  Lbl.AutoSize := True;
  Lbl.Parent := Page.Surface;

  HeadNode := TEdit.Create(Page);
  HeadNode.Top := Lbl.Top + Lbl.Height + ScaleY(8);
  HeadNode.Width := Page.SurfaceWidth div 3 - ScaleX(8);
  HeadNode.Text := '141.58.1.6';
  HeadNode.Parent := Page.Surface;


  NumNodes := TEdit.Create(Page);
  NumNodes.Top := Lbl.Top + Lbl.Height + ScaleY(8);
  NumNodes.Left := HeadNode.Left + HeadNode.Width + ScaleX(8);
  NumNodes.Width := ScaleX(32);
  NumNodes.Text := '8';
  NumNodes.Parent := Page.Surface;

  Lbl5 := TLabel.Create(Page);
  Lbl5.Top := Lbl.Top;
  Lbl5.Left := HeadNode.Left + HeadNode.Width + ScaleX(8);
  Lbl5.Caption := 'Number of simulation nodes';
  Lbl5.AutoSize := True;
  Lbl5.Parent := Page.Surface;

  NumCPUs := TEdit.Create(Page);
  NumCPUs.Top := Lbl.Top + Lbl.Height + ScaleY(8);
  NumCPUs.Left := Lbl5.Left + Lbl5.Width + ScaleX(8);
  NumCPUs.Width := ScaleX(32);
  NumCPUs.Text := '2';
  NumCPUs.Parent := Page.Surface;

  Lbl6 := TLabel.Create(Page);
  Lbl6.Top := Lbl.Top;
  Lbl6.Left := Lbl5.Left + Lbl5.Width + ScaleX(8);
  Lbl6.Caption := 'Number of CPUs per node';
  Lbl6.AutoSize := True;
  Lbl6.Parent := Page.Surface;

  Lbl2 := TLabel.Create(Page);
  Lbl2.Top := HeadNode.Top + HeadNode.Height + ScaleY(16);
  Lbl2.Caption := 'RenderingNode hostname';
  Lbl2.AutoSize := True;
  Lbl2.Parent := Page.Surface;

  VisNode := TEdit.Create(Page);
  VisNode.Top := Lbl2.Top + Lbl2.Height + ScaleY(8);
  VisNode.Width := Page.SurfaceWidth div 2 - ScaleX(8);
  VisNode.Text := 'visd800';
  VisNode.Parent := Page.Surface;

  Lbl3 := TLabel.Create(Page);
  Lbl3.Top := VisNode.Top + VisNode.Height + ScaleY(16);
  Lbl3.Caption := 'TabletPC hostname';
  Lbl3.AutoSize := True;
  Lbl3.Parent := Page.Surface;

  TabletPC := TEdit.Create(Page);
  TabletPC.Top := Lbl3.Top + Lbl3.Height + ScaleY(8);
  TabletPC.Width := Page.SurfaceWidth div 2 - ScaleX(8);
  TabletPC.Text := 'vistablet.hlrs.de';
  TabletPC.Parent := Page.Surface;

  Lbl4 := TLabel.Create(Page);
  Lbl4.Top := TabletPC.Top + TabletPC.Height + ScaleY(16);
  Lbl4.Caption := 'Pos processing node hostname';
  Lbl4.AutoSize := True;
  Lbl4.Parent := Page.Surface;

  PostNode := TEdit.Create(Page);
  PostNode.Top := Lbl4.Top + Lbl4.Height + ScaleY(8);
  PostNode.Width := Page.SurfaceWidth div 2 - ScaleX(8);
  PostNode.Text := 'visper.hlrs.de';
  PostNode.Parent := Page.Surface;

  Page := CreateCustomPage(Page.ID, 'MPI Config', 'choose which MPI to use');

  Lbl31 := TLabel.Create(Page);
  {Lbl31.Top := Memo.Top + Memo.Height + ScaleY(8);}
  Lbl31.Caption := 'MPI to use';
  Lbl31.AutoSize := True;
  Lbl31.Parent := Page.Surface;


  msmpiRadio := TRadioButton.Create(Page);
  msmpiRadio.Top := Lbl31.Top + Lbl31.Height + ScaleY(8);
  msmpiRadio.Width := Page.SurfaceWidth div 3 - ScaleX(8);
  msmpiRadio.Caption := 'Microsoft MPI';
  msmpiRadio.Checked := true;
  msmpiRadio.Parent := Page.Surface;
  msmpiRadio.OnClick := @msmpiButtonOnClick;

  mpichRadio := TRadioButton.Create(Page);
  mpichRadio.Top := msmpiRadio.Top + msmpiRadio.Height + ScaleY(8);
  mpichRadio.Width := Page.SurfaceWidth div 3 - ScaleX(8);
  mpichRadio.Caption := 'MPICH';
  mpichRadio.Checked := false;
  mpichRadio.Parent := Page.Surface;
  mpichRadio.OnClick := @mpichButtonOnClick;


  Page := CreateCustomPage(Page.ID, 'MPICH Config', 'password for smpd');

  Lbl21 := TLabel.Create(Page);
  {Lbl21.Top := Memo.Top + Memo.Height + ScaleY(8);}
  Lbl21.Caption := 'Password for ' +GetUserNameString();
  Lbl21.AutoSize := True;
  Lbl21.Parent := Page.Surface;

  PasswordEdit := TPasswordEdit.Create(Page);
  PasswordEdit.Top := Lbl21.Top + Lbl21.Height + ScaleY(8);
  PasswordEdit.Width := Page.SurfaceWidth div 3 - ScaleX(8);
  PasswordEdit.Text := '';
  PasswordEdit.Parent := Page.Surface;

end;

function InstallMPICH(): Boolean;
begin
     Result := mpichRadio.Checked;
end;
function InstallMSMPI(): Boolean;
begin
     Result := mpichRadio.Checked;
end;

procedure AboutButtonOnClick(Sender: TObject);
begin
  MsgBox('This Wizard allows to configure your demo hardware configuration', mbInformation, mb_Ok);
end;

procedure URLLabelOnClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('open', 'https://www.hlrs.de/solutions/types-of-computing/visualization/', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
end;
procedure InitializeWizard();
var
  AboutButton, CancelButton: TButton;
  URLLabel: TNewStaticText;
  BackgroundBitmapImage: TBitmapImage;
  BackgroundBitmapText: TNewStaticText;
begin
  { Custom wizard pages }


  CreateTheWizardPages;

  { Other custom controls }

  CancelButton := WizardForm.CancelButton;

  AboutButton := TButton.Create(WizardForm);
  AboutButton.Left := WizardForm.ClientWidth - CancelButton.Left - CancelButton.Width;
  AboutButton.Top := CancelButton.Top;
  AboutButton.Width := CancelButton.Width;
  AboutButton.Height := CancelButton.Height;
  AboutButton.Caption := '&About...';
  AboutButton.OnClick := @AboutButtonOnClick;
  AboutButton.Parent := WizardForm;

  URLLabel := TNewStaticText.Create(WizardForm);
  URLLabel.Caption := 'www.hlrs.de';
  URLLabel.Cursor := crHand;
  URLLabel.OnClick := @URLLabelOnClick;
  URLLabel.Parent := WizardForm;
  { Alter Font *after* setting Parent so the correct defaults are inherited first }
  URLLabel.Font.Style := URLLabel.Font.Style + [fsUnderline];
  URLLabel.Font.Color := clBlue;
  URLLabel.Top := AboutButton.Top + AboutButton.Height - URLLabel.Height - 2;
  URLLabel.Left := AboutButton.Left + AboutButton.Width + ScaleX(20);

  BackgroundBitmapImage := TBitmapImage.Create(MainForm);
  BackgroundBitmapImage.Left := 50;
  BackgroundBitmapImage.Top := 100;
  BackgroundBitmapImage.AutoSize := True;
  BackgroundBitmapImage.Bitmap := WizardForm.WizardBitmapImage.Bitmap;
  BackgroundBitmapImage.Parent := MainForm;

  BackgroundBitmapText := TNewStaticText.Create(MainForm);
  BackgroundBitmapText.Left := BackgroundBitmapImage.Left;
  BackgroundBitmapText.Top := BackgroundBitmapImage.Top + BackgroundBitmapImage.Height + ScaleY(8);
  BackgroundBitmapText.Caption := 'TBitmapImage';
  BackgroundBitmapText.Parent := MainForm;
end;



function InitializeUninstall(): Boolean;
var
   appDir: String;
   i,ResultCode: Integer;
begin

      appDir := ExpandConstant('{app}');

      for i:=1 to Length(appDir) do
      begin
       if appDir[i]='\' then
       begin
           appDir[i] :='/';
       end;
      end;
      Exec('cmd.exe', '/c clean_covise.bat', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
      Exec('cmd.exe', '/c taskkill /f /IM flow.exe', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
      Exec('cmd.exe', '/c '+appDir+'/simulation/IHS/bin/smpd -remove', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
      Exec('cmd.exe', '/c taskkill /f /IM smpd.exe', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
      Exec('cmd.exe', '/c taskkill /f /IM RemoteDaemon.exe', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);

  Result := True;
end;
function InstallForAll(): Boolean;
begin

  Result := False;
  if IsAdminLoggedOn then
  begin
     Result := CheckInstallForAll.Checked;
  end;
end;

function InstallForUser(): Boolean;
begin
     Result := NOT InstallForAll();
end;

function InstallRemoteDaemonForAll(): Boolean;
begin
  Result := False;
  if IsAdminLoggedOn then
  begin
     Result := CheckInstallRemoteDaemonForAll.Checked;
  end;
end;

function InstallRemoteDaemonForUser(): Boolean;
begin
    if CheckInstallRemoteDaemonForAll.Checked then
    Result:=false
    else
     Result := CheckInstallRemoteDaemon.Checked;
end;

begin
end.
