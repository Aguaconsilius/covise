
#version 430
uniform float osg_FrameTime;
layout(binding=0, r32f) coherent  uniform readonly image2D configuration;
// TODO: somehow only working for 2D images, or the first layer of the 3D image. Should be cheaper than a texelFetch
//layout(binding=1, r8) coherent  uniform readonly image3D AllPhotometricLights;
layout(binding=2, r16f) coherent uniform writeonly image2D targetTex;
//uniform sampler2D configuration;
uniform sampler3D AllPhotometricLightsTexX;
layout (local_size_x = 16, local_size_y = 16) in;
void main() {
   ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
   ivec3 dim = textureSize(AllPhotometricLightsTexX, 0);  // textureSize with LOD or imageSize
   int num_lights = dim[2];// textureSize or imageSize
   float factor = 0.0;
   float candela = 0.0;
   ivec3 newitc3;
   vec4 trgt = vec4(0);
   newitc3[0] = storePos[0];
   newitc3[1] = storePos[1];
   for (int i = 0; i < num_lights; i++)
   {
       if ((newitc3[0]<dim[0]) && (newitc3[1]<dim[1]))  // dim2[1]
       {
            newitc3[2] = i;
            factor = imageLoad(configuration, ivec2(i, 0)).r;
            // imageLoad or texelFetch with LOD
            //candela = imageLoad(AllPhotometricLights, newitc3)[0] / float (num_lights);  //wordks only for i = 0
            candela = texelFetch(AllPhotometricLightsTexX, newitc3, 0).r;  // returns float (0 ... 1) insead of byte (0 ... 255) ???
            trgt[0] += (factor * candela);
        }
   }
   imageStore(targetTex, storePos, trgt);
}
