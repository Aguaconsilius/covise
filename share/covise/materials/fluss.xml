
<fluss transparent="true" cullFace="none">

  <uniform name="Time" type="int" value="0"/>

  <uniform name="WaterScale" type="vec3" value="2 3 0.3"/>

  <uniform name="WaterColor" type="vec4" value="0.176357 0.540137 0.850980 0.5"/>

  <uniform name="WaveSpeed" type="vec3" value="0.01 0.01 0.02"/>

  <uniform name="WaveSpeed2" type="vec3" value="0.05 0.2 0.2"/>

  <uniform name="WaveScale" type="vec3" value="3 .2 0.02"/>

  <uniform name="normalMap" overwrite="true" texture="/mnt/raid/svn/wcs/trunk/covise/textures/noise.jpg" type="sampler2D" value="0"/>

  <uniform name="FresExp" type="float" value="1.0"/>

  <uniform name="Bumpiness" type="float" value="1"/>

  <uniform name="KrMin" type="float" value="0.02"/>

  <uniform name="Kr" type="float" value="1.0"/>

  <uniform name="cubeMap" overwrite="true" texture1="/mnt/raid/svn/wcs/trunk/covise/textures/posx.jpg" texture2="/mnt/raid/svn/wcs/trunk/covise/textures/posy.jpg" texture3="/mnt/raid/svn/wcs/trunk/covise/textures/posz.jpg" texture4="/mnt/raid/svn/wcs/trunk/covise/textures/negx.jpg" texture5="/mnt/raid/svn/wcs/trunk/covise/textures/negy.jpg" texture6="/mnt/raid/svn/wcs/trunk/covise/textures/negz.jpg" type="samplerCube" value="1"/>

  <attribute name="aBinormal" type="binormal" value="6"/>

  <attribute name="aTangent" type="tangent" value="7"/>

  <vertexProgram>
  
    varying vec3 normal, lightDir, eyeVec;
    varying vec3 Binormal;
    varying vec3 Tangent;
    varying vec2 Texcoord;
    varying vec2 Texcoord2;
  
    attribute vec3 aBinormal;
    attribute vec3 aTangent;
    
    uniform vec3 WaveSpeed;
    uniform vec3 WaveSpeed2;
    uniform vec3  WaterScale;
    uniform vec3 WaveScale;
        uniform int Time;
     
    void main( void )
    {
        float time = Time/1000.0;
        normal   = gl_NormalMatrix * gl_Normal;
        Binormal = gl_NormalMatrix * aBinormal;
        Tangent  = gl_NormalMatrix * aTangent; 
        Texcoord.x = gl_MultiTexCoord0.x *WaterScale.x +time*WaveSpeed.x;
        Texcoord.y = gl_MultiTexCoord0.y *WaterScale.y +time*WaveSpeed.y;
        Texcoord2.x = gl_MultiTexCoord0.x *WaterScale.x +time*WaveSpeed2.x*WaveScale.x;
        Texcoord2.y = gl_MultiTexCoord0.y *WaterScale.y +time*WaveSpeed2.y*WaveScale.y;
     
     	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
     
     	lightDir = vec3(gl_LightSource[0].position.xyz - vVertex);
     	eyeVec = -vVertex;
     	
gl_ClipVertex = gl_ModelViewMatrix*gl_Vertex;
	gl_Position = ftransform();	
    }
  </vertexProgram>

  <fragmentProgram>
   
    varying vec3 normal, lightDir, eyeVec;
    varying vec3 Binormal;
    varying vec3 Tangent;
    varying vec2 Texcoord;
    varying vec2 Texcoord2;
   
   
    uniform sampler2D normalMap;
    uniform int Time;
    uniform vec4  WaterColor;
   
    uniform float Bumpiness;
    uniform float KrMin;
    uniform float Kr;
    uniform float FresExp;
    uniform samplerCube cubeMap;
   
    void main( void )
    {
      vec4 final_color = 
      	(gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
      	(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
      vec3 bumpmap = 5.0 * Bumpiness * texture2D( normalMap, Texcoord ) - vec3(0.5,0.5,0.5);
      bumpmap = mix(bumpmap,2.0 * Bumpiness * texture2D( normalMap, Texcoord2 ) - vec3(0.5,0.5,0.5),0.5);	
      							
      vec3 N = normalize(normal);
      vec3 Tn = normalize(Tangent);
      vec3 Bn = normalize(Binormal);
      N += (bumpmap.x * Tn + bumpmap.y * Bn);
      N = normalize(N);
      
      eyeVec = normalize(eyeVec);
      	
      vec3 L = normalize(lightDir);
      	
      vec3 reflVec   = reflect(-eyeVec, N);
      vec4 reflColor = textureCube( cubeMap, reflVec );
      	
      float lambertTerm = dot(N,L);	
      if(lambertTerm &gt; 0.0)
      {
      
      	final_color += gl_LightSource[0].diffuse * 
      	               WaterColor * lambertTerm;	
        float vdn = dot(eyeVec,N);
	float fres = KrMin + (Kr-KrMin) * pow(1-abs(vdn),FresExp);
	final_color = mix(final_color  ,reflColor,fres);
      		
      	vec3 E = normalize(eyeVec);
      	vec3 R = reflect(-L, N);
      	float specular = pow( max(dot(R, E), 0.0), 
      		                 gl_FrontMaterial.shininess );
      	final_color += gl_LightSource[0].specular * 
      	               gl_FrontMaterial.specular * 
      				   specular;	
        final_color.a = max(WaterColor.a,fres);
      	}
	gl_FragColor = final_color;	
          
    }
  </fragmentProgram>

</fluss>
