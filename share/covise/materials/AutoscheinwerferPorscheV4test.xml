<!--

- debug und spaeter release(geht schneller zu compilieren) in visual studio eingeben und speichern
- fuers debuggen selbst muss debug-attach to progress-breakpoints setzen und debuggen
- osgmatrix-funktion anschauen und projektionsmatrix erstellen,bzw lightmatrix anpassen
- ueberlegen wie matrizen multipliziert werden muessen, da von worldcoordinates zu bildschirmkoors. mit basemat, 
aber rueckwaerts dann ueber inversebasemat
	const osg::Matrix & 	getBaseMat () const
 	transformation matrix from object coordinates to world coordinates 

	const osg::Matrix& coVRPluginSupport::getInvBaseMat 	( 		 )  	const
	transformation from world coordinates to object coordinates

use this cached value instead of inverting getBaseMat() yourself 
 - getestet: 
		- projmat in y-richt fuehrt nur zu licht
		- projmat in z-richt fuehrt zu licht und textur
		- projmat in y-richt und vertex*project fuehrt zu licht und textur
		- test mit verschiedenen werten von lightmat und projmatrix - keine veraenderung
		- test mit versch groesserem frustum und versch winkeln und anderen parametern - keine veraenderung
 
 Koordinatensystem 
 - Momentan ist x-Achse die Fahrzeugquerachse(re aus Fahrersicht ist positiv), y-Achse die Fahrzeug-Hochachse, z-Achse die Fahrzeuglaengsachse (positiv bei Fahrzeug)
 - In 3ds ist x-Achse die Fahrzeugquerachse(li aus Fahrersicht ist positiv), y-Achse die Fahrzeug-Laengsachse, z-Achse die Fahrzeughoch (positiv oberhalb Fahrbahn)
 
 - Lichtkegelberechnung nur mit eyevec, also nur ueber gl-vertex.
 - texturen nicht gerendert und lightmat bzw. projectmat haben keinen einfluss auf lichtkegel
 -->
<AutoscheinwerferPorschefinal>

  <uniform name="constantAttenuation" type="float" value="1"/>
  <uniform name="linearAttenuation" type="float" value="0,5"/>
  <uniform name="quadraticAttenuation" type="float" value="0,05"/>
  <uniform name="diffuseMap" type="sampler2D" value="0"/>
  <uniform name="lightMap" type="sampler2D" value="1"/>
  <uniform name="shininess" type="float" value="1"/>
 <uniform name="Light" type="mat4" value="identity"/>
 <uniform name="Projection" type="mat4" value="identity"/>
  
   <!--Projektionsmatrix: Frustum in y-Richtung;	n=1,f=2,r=2,l=1,t=2,b=1; viewangle = 108
  <uniform name="Projectmat" type="mat4" value="2.0 0.0 0.0 0.0
											-3.0 -3.0 3.0 1.0
											0.0 2.0 0.0 0.0
											0.0 0.0 -4.0 0.0"/>-->
																		
<!--Positionsmatrix der Lichtquelle (besteht aus Lightmat = Skal*Rot*Transl): P'=Lightmat*P z.b.
<uniform name="ModMatrix" type="mat4" value="1.0 0.0 0.0 0.0		
											0.0 0.0 1.0 0.0 
											0.0 0.0 0.0 0.0 
											0.0 0.0 0.0 1.0"/>-->
  
  <vertexProgram>
	
	uniform mat4 Light;
	uniform mat4 Projection;
	
		
	varying vec3 normal, eyeVec, vVertexaugpronorm;
	varying vec4 vVertexaug, vVertexaugpro;
	varying vec2 Texcoord0, Texcoord1,Texcoord2;
	varying mat4 modelfrag, projectfrag;	       
void main( void )
  {		
		
		<!--Transformation des Normalvektors von Objekt- in Augkoordinatien: gl_NormalMatrix=gl_ModelViewMatrix^-1-->		
		normal = gl_NormalMatrix * gl_Normal;
		
		<!--Transformation von Object- in Welt-/Augkoordinaten-->
		vVertexaug = gl_ModelViewMatrix*gl_Vertex;
				
		<!--Transformation in Clipping Coordinates-->		
		eyeVec =(-vVertexaug.xyz);
		vVertexaugpro = Projection * vVertexaug;
		
		<!--Normierung: Umwandlung der Augkoordinaten in dreidimensionale Wuerfelkoordinaten (normalized device coordinates)-->
		vVertexaugpronorm = (vVertexaugpro.xyz)/vVertexaugpro.w;
		
		<!--Texturkoordinaten werden zugewiessen
		Muss hier .xz oder doch .xy, weil eig projektionsmatrix objekte so transformiert, dass xz-ebene parallele zu near und far ebenen ist-->
		Texcoord0 = (0.5*vVertexaugpronorm.xy)+0.5;
		Texcoord1 = (0.5*vVertexaugpronorm.xy)+0.5;
		
		projectfrag = gl_ProjectionMatrix;
		modelfrag = gl_ModelViewMatrix;
		Texcoord2 = gl_MultiTexCoord0.xy;	
		
gl_ClipVertex = gl_ModelViewMatrix*gl_Vertex;
<!--ftransform()=gl_ProjectionMatrix*gl_ModelViewMatrix*gl_Vertex-->
	gl_Position = ftransform();
  }
  </vertexProgram>

  <fragmentProgram>
  
	varying vec3 normal, eyeVec; 
	varying vec2 Texcoord0, Texcoord1,Texcoord2;
	varying mat4 Lightpos, Lightmod, Lightneu, modelfrag;
	varying vec4 vVertexaug, vVertexaugpro;
		
	uniform mat4 Light, Projection;

	uniform float constantAttenuation; 
	uniform float linearAttenuation;    
	uniform float quadraticAttenuation;
	uniform sampler2D diffuseMap;
	uniform sampler2D lightMap;
	uniform float shininess;
			
   void main( void )
   {
	
		float distance;
		float attenuation;
		int Lights = 2, i;
		
		vec3 posvec, lightDir;
		vec4 ambientdiffuse, specular;
		<!--ambienter Anteil, evtl abstand zum betrachter statt att und evtl nur oberer teil-->
		ambientdiffuse = ambientdiffuse+gl_FrontMaterial.ambient;
			<!--(gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient)* attenuation;)-->
	

     for (i=0; i &lt; Lights; i++)
	 {
		
	if (-Light[3].w != 0.0)
	{
		<!-- positional light source-->
		
		lightDir	= vec3(-Light[3].xyz - vVertexaug.xyz);
		distance	= length(lightDir);
		attenuation	= 1.0/(	constantAttenuation + 
					linearAttenuation * distance +
					quadraticAttenuation * distance *distance );
	}		
	else 
	{			
		<!--directional light source			-->
		attenuation	= 1.0;			
		lightDir	= -Light[3].xyz;		
	}
      	vec3 N = normalize(normal);
      	vec3 L = normalize(lightDir);
      	
		float lambertTerm = dot(N,L);
      	
		if(lambertTerm &gt; 0.0)
      	{
		<!--diffuser Anteil-->
		ambientdiffuse = ambientdiffuse+(gl_FrontMaterial.diffuse * lambertTerm*attenuation );
			
		<!--spekularer Anteil-->
      	
			vec3 E = normalize(eyeVec);
      		vec3 R = reflect(-L, N);
			vec4 specular = specular + (pow( max(dot(R, E), 0.0), 
      		                 gl_FrontMaterial.shininess ) * gl_FrontMaterial.specular * attenuation);
		}
	  } 	
      <!-- final color berechnen	
		 gl_FrontLightModelProduct.sceneColor doch erst am ende als final_color=gl_frontlightmodelproduct.scenecolor+amb+spec+diff
		 weil definition ist struct gl_LightModelProducts{
								vec4  sceneColor; // Derived. Ecm + Acm * Acs (materialem+matamb*ambszene)
										siehe clockword coders};
		 und daher oben amb = gl_LightSource[0].ambient * gl_FrontMaterial.ambient -->

			 gl_FragColor = ((gl_FrontLightModelProduct.sceneColor + ambientdiffuse)* texture2D(diffuseMap, Texcoord0) * texture2D(lightMap, Texcoord1) ) + specular;
		 gl_FragColor = texture2D(diffuseMap, Texcoord0) * texture2D(lightMap, Texcoord1)*ambientdiffuse*attenuation;
	gl_FragColor.w = 1.0;
   }
  </fragmentShader>
</AutoscheinwerferPorschefinal>
